import java.util.ArrayList;
import java.util.Scanner;

public class getMazePathsWithJump {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        ArrayList<String> path = getMazePathWithJump(1,1,n,m);
        System.out.println(path);
    }

    private static ArrayList<String> getMazePathWithJump(int sr, int sc, int dr, int dc) {
        
     //base case
        if(sc==dc && sr==dr){
            ArrayList<String> bres = new ArrayList<>();
            bres.add("");
            return bres;
        }

        ArrayList<String> paths = new ArrayList<>();

        //horizontal moves
        for (int ms=1;ms<=dc-sc;ms++) {
            ArrayList<String> hpaths = getMazePathWithJump(sr,sc+ms,dr,dc);
            for (String hpath : hpaths){
                paths.add("h"+ms+hpath);
            }
        }

        //vertical moves
        for (int ms=1;ms<=dr-sr;ms++){
            ArrayList<String> vpaths = getMazePathWithJump(sr+ms, sc, dr, dc);
            for (String vpath : vpaths){
                paths.add("v"+ms+vpath);
            }
        }

        //diagonal moves
        for (int ms=1;ms<=dc-sc && ms<=dr-sr;ms++){
            ArrayList<String> dpaths = getMazePathWithJump(sr+ms, sc+ms, dr, dc);
            for (String dpath : dpaths){
                paths.add("d"+ms+dpath);
            }
        }

        return paths;
    }

}

//input : 3,3
//output : [h1h1v1v1, h1h1v2, h1v1h1v1, h1v1v1h1, h1v1d1, h1v2h1, h1d1v1, h2v1v1, h2v2, v1h1h1v1, v1h1v1h1, v1h1d1, v1h2v1, v1v1h1h1, v1v1h2, v1d1h1, v2h1h1, v2h2, d1h1v1, d1v1h1, d1d1, d2]
