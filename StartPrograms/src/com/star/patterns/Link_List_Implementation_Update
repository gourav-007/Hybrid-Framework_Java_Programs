public class LL {

    private Node head;
    private Node tail;
    private int size;

    public LL() {
        this.size = 0;
    }

    public void insertFirst(int val){
        Node node = new Node(val);
        node.next = head;
        head = node;
        if(tail==null){
            tail = head;
        }
        size +=1;
    }

    public void insertLast(int val){
        if(tail==null){
            insertFirst(val);
            return;
        }
        Node node = new Node(val);
        tail.next = node;
        tail = node.next;
        size++;
    }

    public int getFirst(){
        return head.val;
    }

    public void insertAtIndex(int val, int index){
        if(index==0){
            insertFirst(val);
            return;
        } else if (index==size) {
            insertLast(val);
            return;
        }
        else {
            Node temp = head;
            for(int i=1;i<index;i++){
                temp = temp.next;
            }
            Node node = new Node(val,temp.next);
                temp.next = node;
                size++;
        }
    }

    public int deleteFirst(){
        int val = head.val;
        head = head.next;
        if(head==null){
            tail=null;
        }
        size--;
        return val;
    }

    public int deleteLast(){
        if(size<=1){
            return deleteFirst();
        }
        Node secondLast = getNode(size-2);
        int value = tail.val;
        tail = secondLast;
        tail.next = null;
        return value;
    }

    public Node findNode(int value){
        Node node = head;
        while (node!= null) {
            if (node.val == value) {
                return node;
            }
            node = node.next;
        }
        return null;
    }

    public Node getNode(int index){
        Node node = head;
        for(int i=0;i<index;i++){
            node = node.next;
        }
        return node;
    }

    public int deleteAtIndex(int index){
        if(index==0){
            return deleteFirst();
        }
        if (index==1){
            return deleteLast();
        }
        Node prev = getNode(index-1);
        int val = prev.val;
        prev.next = prev.next.next;
        return val;
    }

    public void display(){
        Node temp = head;
        while (temp!=null){
            System.out.print(temp.val+" -> ");
            temp=temp.next;
        }
        System.out.println("END");
    }

    public void removeDuplicates(){
        Node node = head;
        if(node.val==node.next.val){
            node.next = node.next.next;
            size--;
        } else {
            node = node.next;
        }
        tail=node;
        tail.next=null;
    }

    public int getMid(){
        Node s = head;
        Node f = head;

        while (f.next!=null && f.next.next!=null){
            s = s.next;
            f = f.next.next;
        }
        return s.val;
    }

    public static LL merge(LL first,LL second){

        Node f = first.head;
        Node s = second.head;

        LL ans = new LL();

        while (f!=null && s!=null){
            if(f.val<s.val){
                ans.insertLast(f.val);
                f=f.next;
            } else {
                ans.insertLast(s.val);
                s=s.next;
            }
        }
        while (f!=null){
            ans.insertLast(f.val);
            f=f.next;
        }

        while (s!=null){
            ans.insertLast(s.val);
            s=s.next;
        }
        return ans;
    }

    public static Node middleNode(Node head) {
        Node s = head;
        Node f = head;

        while (f != null && f.next != null) {
            s = s.next;
            f = f.next.next;

        }
        return s;
    }

    public boolean cycleDetect() {
        Node fast = head;
        Node slow = head;

        while (fast!=null && fast.next!=null) {
            fast = fast.next.next;
            slow = slow.next;
            if(fast==slow){
                return true;
            }
        }
        return false;
    }

    public boolean isHappy(int n){
        int slow =n;
        int fast =n;

        do{
            slow = findsquare(n);
            fast = findsquare(findsquare(n));
        } while (slow!=fast);

        if(slow==1){
            return true;
        }
        return false;
    }

    private int findsquare(int number){
        int ans =0;
        while (number>0){
            int rem = number%10;
            ans = ans + rem*rem;
        }
        return ans;
    }

    public void oddEven(){
        LL odd = new LL();
        LL even = new LL();

        while (this.size>0) {
            int val = this.getFirst();
            this.deleteFirst();

            if(val % 2 == 0){
                even.insertLast(val);
            } else {
                odd.insertLast(val);
            }
        }

        if(odd.size > 0 && even.size > 0) {
            odd.tail.next = even.head;
            this.head = odd.head;
            this.tail = even.tail;
            this.size = odd.size + even.size;
        } else if (odd.size > 0) {
            this.head = odd.head;
            this.tail = odd.tail;
            this.size = odd.size;
        } else {
            this.head = even.head;
            this.tail = even.tail;
            this.size = even.size;
        }

    }

    public static Node midNode(Node head,Node tail){
        Node fast = head;
        Node slow = head;

        while (fast!=tail && fast.next!=tail){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
//
//    public LL mergeSort(Node head){
//        if(head==null && head.next==null) {
//            return head;
//        }
//        Node mid = middleNode(head);
//        LL left = mergeSort(head);
//        LL right = mergeSort(mid);
//        return merge(left,right);
//    }

    private class Node{
        private int val;
        private Node next;
        public Node(int val, Node next) {
            this.val = val;
            this.next = next;
        }
        public Node(int val){
            this.val=val;
        }
    }
}
