public static int precedence(char optor){

        if(optor == '+'){
            return 1;
        }

        else if (optor == '-'){
            return 1;
        }

        else if (optor == '*'){
            return 2;
        }

        else{
            return 2;
        }
    }

    public static int operation(int v1, int v2, char optor){

        if(optor == '+'){
            return v1+v2;
        }
        else if(optor == '-'){
            return v1-v2;
        }
        else if(optor == '*'){
            return v1*v2;
        }
        else{
            return v1/v2;
        }
    }

    public static void main(String[] args) {
        String infixExpression = "2 * (5 + 3) / 4";
        Stack<Integer> opends  = new Stack<>();
        Stack<Character> optors = new Stack<>();

        for(int i=0;i<infixExpression.length();i++){
            char ch = infixExpression.charAt(i);
            if(ch=='('){
                optors.push(ch);
            }
            else if (Character.isDigit(ch)){
                opends.push(ch-'0');
            }

            else if(ch==')'){

                while(optors.peek()!='('){
                    char optor = optors.pop();
                    int v2 = opends.pop();
                    int v1 = opends.pop();

                    int opv = operation(v1,v2,optor);
                    opends.push(opv);
                }
                optors.pop();
            }

            else if(ch=='+' || ch=='-' || ch=='*' || ch=='/')
            {
                //ch wants to higher priority opertaor should solve first.
                while(!optors.isEmpty() && optors.peek()!='(' &&
                        precedence(ch) <= precedence(optors.peek()))

                {
                    char optor = optors.pop();
                    int v2 = opends.pop();
                    int v1 = opends.pop();

                    int opv = operation(v1,v2,optor);
                    opends.push(opv);
                }

                //ch pushing itself now.
                optors.push(ch);
            }
        }


        while(!optors.isEmpty()){
            char optor = optors.pop();
            int v2 = opends.pop();
            int v1 = opends.pop();

            int opv = operation(v1,v2,optor);
            opends.push(opv);
        }

        System.out.println(opends.peek());

    }
    
//output : 4    
