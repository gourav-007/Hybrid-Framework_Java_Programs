package samplepkg;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Queue;
import java.util.Stack;

public class BinaryTree {

    public static class Node{

        int data;
        Node left;
        Node right;

        public Node(int data, Node left, Node right) {
            this.data = data;
            this.left = left;
            this.right = right;
        }

        public Node(int data) {
            this.data = data;
        }
    }

    public static class Pair{
        Node node;
        int level;

        public Pair(Node node, int level) {
            this.node = node;
            this.level = level;
        }
        Pair(){

        }
    }

    public static void display(Node node){
        //Self Node Work.
        if(node == null){
            return;
        }

        String str = "";
        str += node.left==null?".":node.left.data+"";
        str += "<-- "+node.data+" -->";
        str += node.right==null?".":node.right.data+"";
        System.out.println(str);

        //recursive call for left and right.
        display(node.left);
        display(node.right);
    }

    public static Node construct(Integer[]arr) {

        Node root = new Node(arr[0]);

        Stack< Pair>st = new Stack< >();
        Pair root_pair = new Pair(root, 1);

        st.push(root_pair);
        int idx = 1;

        while (st.size() > 0) {
            Pair top = st.peek();

            if (top.level == 1) {
                //waiting for left child
                top.level++;
                if (arr[idx] != null) {
                    Node lc = new Node(arr[idx]);
                    top.node.left = lc;

                    Pair lcp = new Pair(lc, 1);
                    st.push(lcp);
                }
                idx++;
            }
            else if (top.level == 2) {
                //waiting for right child
                top.level++;
                if (arr[idx] != null) {
                    Node rc = new Node(arr[idx]);
                    top.node.right = rc;

                    Pair rcp = new Pair(rc, 1);
                    st.push(rcp);
                }
                idx++;
            }
            else if (top.level == 3) {
                st.pop();
            }
        }

        return root;

    }

    public static int size(Node node){
        int size = 0;
        if(node==null){
            return 0;
        }
        int lc = size(node.left); //left size
        size = size + lc;
        int rc = size(node.right); //right size.
        size = size + rc;

        size = size + 1;
        return size;
    }

    static int maxnode = 0;
    static int maxsum = Integer.MIN_VALUE;
    public static int sum(Node node){
        int sum=0;

        if(node==null){
            return 0;
        }

        int lsum = sum(node.left); //left sum.
        sum = sum + lsum;
        int rsum = sum(node.right); //right sum.
        sum = sum  + rsum;

        sum = sum + node.data; //root adding itself to sum.

        if(sum>maxsum){
            maxsum = sum;
            maxnode = node.data;
        }
        return sum;
    }

    public static int max(Node node){
        int max = Integer.MIN_VALUE;

        if(node == null){
            return 0;
        }

        int lmax = max(node.left); //left max.
        max  = Math.max(lmax,max);
        int rmax = max(node.right); //right max.
        max = Math.max(rmax,max);

        max = Math.max(node.data,max);
        return max;
    }

    public static int height(Node node){
        if(node == null){
            return -1; // in case of edge;
            //return 0 in case of nodes.
        }
        int lheight = height(node.left); //left height.
        int rheight  = height(node.right); //right height.
        int theight = Math.max(lheight,rheight);

        theight = theight + 1; //adding height of self.
        return theight;
    }

    public static void traversals(Node node){
        if(node==null){
            return;
        }
        System.out.println("Pre Order : "+node.data); //pre order
        traversals(node.left);
        System.out.println("In Order "+node.data); //in order.
        traversals(node.right);
        System.out.println("Post Order :"+node.data); //post order.
    }

    public static void levelOrderTraversal(Node node){
        //Remove-Print-Add
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(node);

        while (!queue.isEmpty()){
            int count  = queue.size();
            for(int i=0;i<count;i++) {
                node = queue.remove();
                System.out.print(node.data + "-->");

                if(node.left!=null) {
                    queue.add(node.left);
                }

                if(node.right!=null) {
                    queue.add(node.right);
                }
            }
            System.out.println(".");
        }
    }

    public static void iterativeLevelOrderTraversal(Node node) {
        Stack<Pair> stack = new Stack<>();
        stack.push(new Pair(node, 1));

        String pre = "";
        String in = "";
        String post = "";

        while (!stack.isEmpty()) {
            Pair top = stack.peek();
            if (top.level == 1) {
                pre = pre + top.node.data + " ";
                top.level++;
                if (top.node.left != null) {
                    Pair leftpair = new Pair(top.node.left, 1);
                    stack.push(leftpair);
                }
            } else if (top.level == 2) {
                in = in + top.node.data+" ";
                top.level++;
                if (top.node.right != null) {
                    Pair rightpair = new Pair(top.node.right, 1);
                    stack.push(rightpair);
                }
            } else {
                post = post + top.node.data+" ";
                stack.pop();
            }
        }
        System.out.println("Pre Order : "+pre+" ");
        System.out.println("In Order : "+in+" ");
        System.out.println("Post Order : "+post+" ");
    }

    static ArrayList<Integer> path;
    public static boolean findNodeToRoot(Node node,int element) {
        /* Here we are checking element in Binary Tree
        if node is that element return true;
        else check in left sub tree (if false).
        else check in right sub tree.
        And while coming back to node from finding element we are adding the same in ArrayList.
        and returning the same path contains element to node.*/

        if(node==null){             //Base Case
            return false;
        }

        if(node.data==element){     //Self Check
            path.add(node.data);
            return true;
        }

        boolean find_in_left_child = findNodeToRoot(node.left,element);
        if(find_in_left_child){     //Left Check
            path.add(node.data);
            return true;
        }

        boolean find_in_right_child = findNodeToRoot(node.right,element);
        if(find_in_right_child){    //Right Check
            path.add(node.data);
            return true;
        }

        return false;
    }

    public static void printKLevelsDown(Node node, int k){
        //Printing K-Levels Down.
        if(node==null || k < 0){
            return;
        }

        if(k==0){
            System.out.print(node.data+" ");
        }

        printKLevelsDown(node.left,k-1);
        printKLevelsDown(node.right,k-1);
    }

    public static void main(String[] args) {
            Integer[] arr = {50, 25, 12, null, null, 37, 30, null, null, null,75, 62, null, 70, null, null, 87, null, null};
            Node root = construct(arr);
            System.out.println("left<--Node-->right");
            display(root);
            System.out.println("Size of given Binary Tree is : "+size(root));
            System.out.println("Maximum in Binary Tree is : "+max(root));
            System.out.println("Sum of nodes in Binary Tree is : "+sum(root));
            System.out.println("Height of Binary Tree is : "+height(root));
            System.out .println("Printing Pre-Order, In-Order, Post-Order of a Binary Tree...");
            traversals(root);
            levelOrderTraversal(root);
            iterativeLevelOrderTraversal(root);
            //finding and printing the path from element to node.
            path = new ArrayList<>();
            System.out.println("Found Path ? "+findNodeToRoot(root,70));
            System.out.println("Node to Root Path : " +path);
            System.out.println("Printing K Levels Down....");
            printKLevelsDown(root,1);
        }
    }
