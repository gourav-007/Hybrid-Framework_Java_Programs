package samplepkg;

import java.util.ArrayList;
import java.util.Stack;

/*
Print Nodes K Level Far Away ...Problem asked in AMAZON***
in this our approach will be ...
1. We find the path from Node to Root.
2. We run a for loop by path.size() times; to call K level down operation which will print K level of nodes...But will also print unessary
   left or right nodes that are traversed already, to prevent this we added Node blocker in K level method which will
   prevent node from getting unessary traversal.
 */

public class printNodesKLevelFar {

    public static class Node {
        int data;
        Node left;
        Node right;

        public Node(Node left, Node right, int data) {
            this.left = left;
            this.right = right;
            this.data = data;
        }
        public Node(int data) {
            this.data = data;
        }
    }

    public static Node constructs(Integer[]arr) {
        Node root = new Node(arr[0]);

        Stack<Pair> stack =  new Stack<>();
        Pair rootpair = new Pair(root,1);

        stack.push(rootpair);
        int idx = 1;

        while (!stack.isEmpty()){

            Pair top = stack.peek();
            if(top.level == 1) {
                top.level++;

                if (arr[idx] != null) {
                    Node lc = new Node(arr[idx]);
                    top.node.left = lc;
                    Pair lcp = new Pair(lc, 1);
                    stack.push(lcp);
                }
                idx++;
            } else if (top.level==2) {
                top.level++;
                if(arr[idx] != null){
                    Node rc = new Node(arr[idx]);
                    top.node.right = rc;

                    Pair rcp = new Pair(rc,1);
                    stack.push(rcp);
                }

                idx++;
            } else if (top.level==3) {
                stack.pop();
            }
        }

        return root;


    }

    public static class Pair{
        Pair() {

        }

        public Pair(Node node, int level) {
            this.node = node;
            this.level = level;
        }

        Node node;
        int level;


    }

    static ArrayList<Node> path;
    public static boolean find(Node node, int element){

        if(node==null){
            return false;
        }

        if(node.data==element){
            path.add(node);
            return true;
        }

        boolean findinleft  = find(node.left,element);
        if(findinleft){
            path.add(node);
            return true;
        }
        boolean findinright = find(node.right,element);
        if(findinright){
            path.add(node);
            return true;
        }

        return false;
    } //finding node to root path here.

    public static void kLevelDown(Node node, int k, Node blocker){

        if(node==null || k<0 || node==blocker){
            return;
        }

        if(k==0){
            System.out.println(node.data+" ");
        }

        kLevelDown(node.left,k-1,blocker);
        kLevelDown(node.right,k-1,blocker);

    }

    public static void printkfarlevel(Node node, int data, int k){
        path = new ArrayList<>();
        find(node,data);
        for(int i=0;i< path.size();i++){
            kLevelDown(path.get(i),k-i,i==0?null:path.get(i-1));
        }
    }

    public static void main(String[] args) {
        Integer[] arr = {50, 25, 12, null, null, 37, 30, null, null, null,75, 62, null, 70, null, null, 87, null, null};
        Node root = constructs(arr);
//
        displays(root);
        System.out.println("Printing all Nodes.");
        printkfarlevel(root,37,2);

    }

    private static void displays(Node node) {
        if(node==null){
            return;
        }

        String str = "";
        str+= node.left==null?".":node.left.data+"";
        str+= "<-- "+node.data+" -->";
        str+= node.right==null?".":node.right.data+"";

        System.out.println(str);

        displays(node.left);
        displays(node.right);

    }
}
