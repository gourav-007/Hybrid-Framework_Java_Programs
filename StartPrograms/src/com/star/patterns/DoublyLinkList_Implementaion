 private Node head;

    public void insertFirst(int val){
        Node node = new Node(val);
        node.next = head;
        node.prev = null;
        if(head!=null) {
            head.prev = node;
        }
        head=node;
    }

    public void deleteFirst(){
        Node node = head;
        head = head.next;
        head.prev = null;
        node.next = null;
    }


    public void display(){
        Node node = head;
        Node last = null;
        while (node!=null){
            System.out.print(node.val+"->");
            last = node;
            node = node.next;
        }
        System.out.println("END");
        System.out.println("Print in reverse.");
        while (last!=null){
            System.out.print(last.val+"->");
            last=last.prev;
        }
        System.out.println("Start");
    }

    public void insertLast(int val){
        Node node = new Node(val);
        Node last = head;
        node.next=null;
        if(head==null){
            node.prev=null;
            head=node;
            return;
        }

        while (last.next!=null){
            last = last.next;
        }
        last.next=node;
        node.prev =  last;
    }

    public void deleteLast(){
        Node temp=head;
        while (temp.next!=null){
            temp = temp.next;
        }
        temp.prev.next = null;
    }

    public void insertAfterValue(int val,int aftervalue){
        Node node = new Node(val);
        Node prev = findNode(aftervalue);
        node.next=prev.next;
        prev.next = node;
        node.prev = prev;
        if(node.next!=null) {
            node.next.prev = node;
        }
    }

    public void deleteAfterNode(int aftervalue){
        Node node = findNode(aftervalue);
        if(node.next!=null) {
            node.next = node.next.next;
            node.next.prev = node;
        }
    }

    public Node findNode(int val){
        Node node = head;
        while (node!=null){
            if(node.val==val){
                return node;
            }
            node = node.next;
        }
        return null;
    }


    private class Node{
        int val;
        Node next;
        Node prev;

        public Node(int val, Node next, Node prev) {
            this.val = val;
            this.next = next;
            this.prev = prev;
        }

        public Node(int val){
            this.val=val;
        }

    }
    
