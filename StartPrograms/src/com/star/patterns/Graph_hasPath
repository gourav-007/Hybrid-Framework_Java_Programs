import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Scanner;

public class HasPath {
    //Check Graph hasPath?

    static class Edge{
        public Edge(int src, int neibr, int wt) {
            this.src = src;
            this.neibr = neibr;
            this.wt = wt;
        }

        int src;
        int neibr;
        int wt;
    }

    public static boolean hasPath(ArrayList<Edge> [] graph, int src, int dest, boolean[] visited){
        if(src==dest){
            return true;
        }

        visited[src] = true;
        for (Edge edges : graph[src]){
            if(!visited[edges.neibr]) {
                boolean hasNbrPath = hasPath(graph, edges.neibr, dest, visited);
                if (hasNbrPath) {
                    return true;
                }
            }
        }

        return false;

    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int vert = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vert];
        for(int i = 0; i < vert; i++){
            graph[i] = new ArrayList<>();
        }

        int edges = Integer.parseInt(br.readLine());
        for(int i = 0; i < edges; i++){
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1, v2, wt));
            graph[v2].add(new Edge(v2, v1, wt));
        }

        int src = Integer.parseInt(br.readLine());
        int dest = Integer.parseInt(br.readLine());

        boolean[] visited = new boolean[vert];
        boolean path = hasPath(graph,src,dest,visited);
        System.out.println(path);
    }

}


/*
Input
------
7
8
0 1 10
1 2 10
2 3 10
0 3 10
3 4 10
4 5 10
5 6 10
4 6 10
0
6
-----
*/
