public class LL {

    private Node head;
    private Node tail;
    private int size;

    public LL() {
        this.size = 0;
    }

    public void insertFirst(int val){
        Node node = new Node(val);
        node.next = head;
        head = node;
        if(tail==null){
            tail = head;
        }
        size +=1;
    }

    public void insertLast(int val){
        if(tail==null){
            insertFirst(val);
            return;
        }
        Node node = new Node(val);
        tail.next = node;
        tail = node.next;
        size++;
    }

    public void insertAtIndex(int val, int index){
        if(index==0){
            insertFirst(val);
            return;
        } else if (index==size) {
            insertLast(val);
            return;
        }
        else {
            Node temp = head;
            for(int i=1;i<index;i++){
                temp = temp.next;
            }
            Node node = new Node(val,temp.next);
                temp.next = node;
                size++;
        }
    }

    public int deleteFirst(){
        int val = head.val;
        head = head.next;
        if(head==null){
            tail=null;
        }
        size--;
        return val;
    }
    public int deleteLast(){
        if(size<=1){
            return deleteFirst();
        }
        Node secondLast = getNode(size-2);
        int value = tail.val;
        tail = secondLast;
        tail.next = null;
        return value;
    }

    public Node findNode(int value){
        Node node = head;
        while (node!= null) {
            if (node.val == value) {
                return node;
            }
            node = node.next;
        }
        return null;
    }

    public Node getNode(int index){
        Node node = head;
        for(int i=0;i<index;i++){
            node = node.next;
        }
        return node;
    }

    public int deleteAtIndex(int index){
        if(index==0){
            return deleteFirst();
        }
        if (index==1){
            return deleteLast();
        }
        Node prev = getNode(index-1);
        int val = prev.val;
        prev.next = prev.next.next;
        return val;
    }

    public void display(){
        Node temp = head;
        while (temp!=null){
            System.out.print(temp.val+" -> ");
            temp=temp.next;
        }
        System.out.println("END");
    }

    private class Node{
        private int val;
        private Node next;
        public Node(int val, Node next) {
            this.val = val;
            this.next = next;
        }
        public Node(int val){
            this.val=val;
        }
    }
}

public class LinkImplement {
    public static void main(String[] args) {
        LL list = new LL();
        list.insertFirst(23);
        list.insertFirst(2);
        list.insertFirst(3);
        list.insertFirst(6);
        list.insertFirst(8);
        list.insertFirst(18);

        list.insertLast(17);
        list.deleteFirst();
        list.insertAtIndex(20,5);

        list.display();
//      list.deleteLast();
        list.deleteAtIndex(2);
        list.display();
        list.findNode(23);
    }


}
