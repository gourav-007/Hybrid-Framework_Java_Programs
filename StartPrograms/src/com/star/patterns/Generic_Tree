
public class GenericTree {

    private static class Node {
        int data;
        ArrayList<Node> childern = new ArrayList<>();
        public Node(int data)
        {
            this.data = data;
        }
        Node()
        {

        }
    }

    public static void display(Node node) {
        String str = node.data + " --> ";
        for (Node child : node.childern) {
            str += child.data + ", ";
        }
        str = str + ".";
        System.out.println(str);
        for (Node child : node.childern) {
            display(child);
        }
    }

    public static int size(Node node) {
        int size = 0;
        for (Node child : node.childern) {
            int cs = size(child);
            size = size + cs;
        }
        size = size + 1;
        return size;
    }

    public static int maximum(Node node) {
        int max = Integer.MIN_VALUE;
        for (Node child : node.childern) {
            int cmax = maximum(child);
            max = Math.max(cmax, max);
        }
        max = Math.max(node.data, max);
        return max;
    }

    public static int height(Node node) {
        int height = -1; //in terms of edges;
        for (Node child : node.childern) {
            int ch = height(child); //return height of child;
            height = Math.max(ch, height);
        }
        height = height + 1;
        return height; //return height
    }

    public static void traversals(Node node) {
        System.out.println("Node Pre : " + node.data); //Pre Area;
        for (Node child : node.childern) {
            System.out.println("Edge Pre : " + node.data + " -> " + child.data); //Pre Edge Area;
            traversals(child);
            System.out.println("Edge Post : " + node.data + " -> " + child.data); //Post Edge Area;
        }
        System.out.println("Node Post : " + node.data);
    }

    public static void levelOrderTraversal(Node node) {
        //R-P-A (Remove, Print, Add)
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(node);
        while (!queue.isEmpty()) {
            node = queue.remove();
            System.out.print(node.data + " -> ");
            queue.addAll(node.childern);
        }
        System.out.println(".");
    }

    public static void levelOrderLineWiseTraversal(Node node) {
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(node);
        Queue<Node> cQueue = new ArrayDeque<>();
        System.out.println("Traversal Begins...");
        while (!queue.isEmpty()) {
            node = queue.remove();
            System.out.print(node.data + " ");
            cQueue.addAll(node.childern);

            if (queue.isEmpty()) {
                queue = cQueue;
                cQueue = new ArrayDeque<>();
                System.out.println();
            }
        }
        System.out.println("Traversal Ends Here !!");
    }

    public static void levelOrderLineWiseTraversal2(Node node){
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(node);
        queue.add(new Node(-1));
        while (!queue.isEmpty()){
            node = queue.remove();
            if(node.data!=-1)
            {
                System.out.print(node.data + " ");
                queue.addAll(node.childern);
            }
            else {
               if(!queue.isEmpty()) {
                   queue.add(new Node(-1));
                    System.out.println();
               }
            }
        }
        System.out.println();
    }

    public static void levelOrderLineWiseTraversal3(Node node){
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(node);
        while (!queue.isEmpty()){
            int child_in_current_level = queue.size();
            for (int i=0;i<child_in_current_level;i++){
                node = queue.remove();
                System.out.print(node.data+" ");

                for (Node child: node.childern){
                    queue.add(child);
                }
            }
            System.out.println();
        }
    }

    public static void zigZagTraversal(Node node){
        Stack<Node> stack = new Stack<>();
        stack.push(node);
        Stack<Node> cStack = new Stack<>();
        int level=1;
        System.out.println("ZigZag Traversal Begins here : ");
        while (!stack.isEmpty()){
            node = stack.pop();
            System.out.print(node.data+ " ");

            if(level % 2 == 1){
                for(int i=0;i<node.childern.size();i++){
                    Node child  = node.childern.get(i);
                    cStack.push(child);
                }
            }
            else {
                for(int i=node.childern.size()-1;i>=0;i--){
                    Node child  = node.childern.get(i);
                    cStack.push(child);
                }

            }

            if(stack.isEmpty()){
                stack = cStack;
                cStack = new Stack<>();
                level++;
                System.out.println();
            }
        }
        System.out.println("ZigZag Traversal Ends Here !!");
    }

// Can Create Seprate Main Class (We Should)

    public static void main(String[] args){
        int [] arr = {10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1};
        Node root = null;
        Stack<Node> stack = new Stack<>();


        for (int i = 0;i < arr.length;i++) {
            if (arr[i] == -1) {
                stack.pop();
            }
            else
            {
                Node n = new Node();
                n.data = arr[i];
                if (!stack.isEmpty()) {
                    stack.peek().childern.add(n);
                } else {
                    root = n;
                }
                stack.push(n);
            }
        }

        display(root);
        System.out.println("Size of Generic Tree : "+ size(root));
        System.out.println("Maximum of Generic Tree : "+maximum(root));
        System.out.println("Height of Generic Tree : "+height(root));
        traversals(root);
        levelOrderTraversal(root);
        levelOrderLineWiseTraversal(root);
        zigZagTraversal(root);
        levelOrderLineWiseTraversal2(root);
        levelOrderLineWiseTraversal3(root);
    }
}
